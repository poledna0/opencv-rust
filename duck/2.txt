
fn main() -> Result<()> {
    let img1 = imgcodecs::imread("img1.jpg", imgcodecs::IMREAD_COLOR)?;
    let img2 = imgcodecs::imread("img2.jpg", imgcodecs::IMREAD_COLOR)?;

    // Inicializa ORB
    let orb = ORB::create(
        500, 1.2, 8, 31, 0, 2,
        features2d::ORB_ScoreType::HARRIS_SCORE, 31, 20
    )?;

    // Detecta keypoints e descritores para imagem 1
    let mut kp1 = types::VectorOfKeyPoint::new();
    let mut desc1 = Mat::default();
    orb.detect_and_compute(&img1, &Mat::default(), &mut kp1, &mut desc1, false)?;

    // Detecta keypoints e descritores para imagem 2
    let mut kp2 = types::VectorOfKeyPoint::new();
    let mut desc2 = Mat::default();
    orb.detect_and_compute(&img2, &Mat::default(), &mut kp2, &mut desc2, false)?;

    // Cria o matcher
    let mut matcher = BFMatcher::create(opencv::core::NORM_HAMMING, false)?;

    // Realiza o matching
    let mut matches = types::VectorOfDMatch::new();
    matcher.match_(&desc1, &desc2, &mut matches, &Mat::default())?;

    // Desenha as correspondências
    let mut output = Mat::default();
    features2d::draw_matches(
        &img1,
        &kp1,
        &img2,
        &kp2,
        &matches,
        &mut output,
        Scalar::all(-1.0),       // cor dos matches
        Scalar::all(-1.0),       // cor dos keypoints não casados
        &types::VectorOfu8::new(), // máscara vazia = desenha todos
        DrawMatchesFlags::DEFAULT,
    )?;

    // Salva e exibe a imagem
    imgcodecs::imwrite("matches.png", &output, &Vector::new())?;
    highgui::imshow("Matches", &output)?;
    highgui::wait_key(0)?;

    Ok(())
}
